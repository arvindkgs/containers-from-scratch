https://www.youtube.com/watch?v=Utf-A4rODH8

https://www.infoq.com/articles/build-a-container-golang

https://godoc.org/syscall
http://man7.org/linux/man-pages/man2/clone.2.html

-- based on code from - Liz Rice - aqua security
--
-- relate back to Scotts slides
-- Containers Defense in Depth
--
https://docs.google.com/presentation/d/1566RF7dh2TRKOEsaY0VIoeoTRDQp5zzDgR1ebn6CBKw/edit#slide=id.g167dd20c9e_3_477

-----------------------------------------------------

-- in emacs
stty -echo

-----------------------------------------------------

-- (1) simple process run
-- 

package main

import (
	"fmt"
	"os"
	"os/exec"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	default:
		panic("help")
	}
}

func run() {
	fmt.Printf("Running %v \n", os.Args[2:])

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

        must(cmd.Run())
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}


--
go run main.go run echo hello
go run main.go run /bin/bash

-- can see processes and filesystem
id
ls
ps

sudo hostname container

-- arghh! not very secure ...
--
-- from other terminal
ps auxwww | grep "go run"

-----------------------------------------------------
-- (2) namespaces

-- add in the ability for our process to
-- system call for unix new time sharing system! means hostname
-- UTS stands for "UNIX Timesharing System"
-- process has a separate copy of the hostname

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	default:
		panic("help")
	}
}

func run() {
	fmt.Printf("Running %v \n", os.Args[2:])

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// namespace - hostname
	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS,
	}

	must(cmd.Run())
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}


--
-- test hostname setting now
-- we have protected hostname now !
--
virt:~/git/containers-from-scratch$ sudo go run main.go run /bin/bash
Running [/bin/bash]
virt:~/git/containers-from-scratch$ id
uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
virt:~/git/containers-from-scratch$ hostname
virt
virt:~/git/containers-from-scratch$ hostname container
virt:~/git/containers-from-scratch$ hostname
container
virt:~/git/containers-from-scratch$ exit
virt:~/git/containers-from-scratch$ hostname
virt


-----------------------------------------------------
-- (3) namespaces


-- what about process id lists ? we saw before that the pids were the same in the container as they
-- were on the host

-- add

| syscall.CLONE_NEWPID,

-- and it looks the same
-- lets fork exec using "/proc/self/exe" - see man proc
-- we can also now set hostname using fork exec

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// namespace - hostname, pids
	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID,
	}

	must(cmd.Run())
}

func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

        must(cmd.Run())
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}


-- test
-- looking better - pid 1, but we can still see all the pids in /proc
-- so we need to give the process its own file system
--

virt:~/git/containers-from-scratch$ sudo go run main.go run /bin/bash
Running [/bin/bash] as PID 1
virt:~/git/containers-from-scratch$ ps
  PID TTY          TIME CMD
24987 pts/3    00:00:00 go
25009 pts/3    00:00:00 main
25014 pts/3    00:00:00 exe
25019 pts/3    00:00:00 bash
25027 pts/3    00:00:00 ps
virt:~/git/containers-from-scratch$ 
virt:~/git/containers-from-scratch$ ls /proc
1/     1118/   1323/   1684/   20613/  24723/  2960/   3265/  472/   922/	  kpageflags
10/    1119/   1324/   1685/   21/     24740/  2965/   3273/  473/   923/	  latency_stats
1015/  112/    1325/   1686/   2106/   24986/  2968/   3276/  4746/  930/	  loadavg
1016/  1122/   1326/   1689/   2107/   24987/  29873/  


-----------------------------------------------------
-- (4) use a new root fs

-- get rhel atomic image filesystem
mkdir -p /home/mike/src/centos
docker export $(docker create centos) | tar -C centos -xvf -

touch /home/mike/src/centos/I_AM_A_ROOTFS

-- now chroot into new fs and chdir to root in child
--
package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID,
	}

	must(cmd.Run())
}

func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	must(syscall.Sethostname([]byte("container")))		
	must(syscall.Chroot("/home/mike/src/centos/"))
	must(syscall.Chdir("/"))
	must(cmd.Run())
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}


-- test
virt:~/git/containers-from-scratch$ asroot go run main.go run /bin/bash
Running [/bin/bash] as PID 1
bash-4.2#

-- oh, something defintely changed here

bash-4.2# ls
I_AM_A_ROOTFS  boot  etc   lib	  lost+found  mnt  proc		 root  sbin  sys  usr
bin	       dev   home  lib64  media       opt  rhel7-atomic  run   srv   tmp  var
bash-4.2# 

-- look at processes, arg need to mount /proc its special filesystem
bash-4.2# ps
Error, do this: mount -t proc proc /proc
bash-4.2# 


-----------------------------------------------------
-- (5) mount /proc

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID,
	}

	must(cmd.Run())
}

func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	must(syscall.Sethostname([]byte("container")))	
	must(syscall.Chroot("/home/mike/src/centos/"))
	must(syscall.Chdir("/"))
	must(syscall.Mount("proc", "proc", "proc", 0, ""))
	must(cmd.Run())
	must(syscall.Unmount("proc", 0))
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

-- test
-- and now we have a process tree just related to our container

virt:~/git/containers-from-scratch$ asroot go run main.go run /bin/bash
Running [/bin/bash] as PID 1
bash-4.2# ps
  PID TTY          TIME CMD
    1 ?        00:00:00 exe
    5 ?        00:00:00 bash
    6 ?        00:00:00 ps
bash-4.2# 

-----------------------------------------------------
-- (6) cgroups

-- lets add new namespace and try cgroups
-- they are heirarchical, created pseudo filesystem
-- /sys/fs/cgroup/

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
	"path/filepath"
	"io/ioutil"
	"strconv"	
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID |
		syscall.CLONE_NEWNS,
	}

	must(cmd.Run())
}

func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

	cg()

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	must(syscall.Sethostname([]byte("container")))
	must(syscall.Chroot("/home/mike/src/centos/"))
	must(syscall.Chdir("/"))
	must(syscall.Mount("proc", "proc", "proc", 0, ""))
	must(cmd.Run())
	must(syscall.Unmount("proc", 0))
}

func cg() {
	cgroups := "/sys/fs/cgroup/"
	pids := filepath.Join(cgroups, "pids")
	os.Mkdir(filepath.Join(pids, "mike"), 0755)
	must(ioutil.WriteFile(filepath.Join(pids, "mike/pids.max"), []byte("20"), 0700))
	// Removes the new cgroup in place after the container exits
	must(ioutil.WriteFile(filepath.Join(pids, "mike/notify_on_release"), []byte("1"), 0700))
	must(ioutil.WriteFile(filepath.Join(pids, "mike/cgroup.procs"), []byte(strconv.Itoa(os.Getpid())), 0700))
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}


-- test
-- from virt
ls /sys/fs/cgroup/pids/mike/
virt:~$ cat /sys/fs/cgroup/pids/mike/pids.max
20

cat /sys/fs/cgroup/pids/mike/pids.current 
6


-- fork bomb it
:(){ :|: & };:

This is called a fork bomb.
:() means you are defining a function called :
{:|: &} means run the function : and send its output to the : function again and run that in the background.
The ; is a command separator, like &&.
: runs the function the first time.
Essentially you are creating a function that calls itself twice every call and doesn't have any way to terminate itself.
It will keep doubling up until you run out of system resources.

-- yay ! cgroups works

virt:~$ cat /sys/fs/cgroup/pids/mike/pids.current 
20
virt


-------------

-- rootless containers
-- cgroup not removed ? notify_on_exit ..
-- extensions to selinux, networking namespace - tunnel ? eth?
-- other defense in depth examples

-- https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/sec-common_tunable_parameters.html
cat <<'EOF' > /usr/local/bin/remove-empty-cpu-cgroup.sh
#!/bin/sh
rmdir /cgroup/cpu/$1
EOF
chmod +x /usr/local/bin/remove-empty-cpu-cgroup.sh

-- present in parent cgroup
echo "/usr/local/bin/remove-empty-cpu-cgroup.sh" > /sys/fs/cgroup/pids/release_agent


-- syscall.CLONE_NEWIPC
ipcs

-- syscall.CLONE_NEWNET
ping 10.0.0.1

-------------------------------

--- non root containers

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
	"path/filepath"
	"io/ioutil"
	"strconv"
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID |
		syscall.CLONE_NEWNS | syscall.CLONE_NEWUSER,
			//syscall.CLONE_NEWIPC
			//syscall.CLONE_NEWNET
			//syscall.CLONE_NEWUSER
	}

	// non root containers
	cmd.SysProcAttr.UidMappings = []syscall.SysProcIDMap{
		{ContainerID: 0, HostID: syscall.Getuid(), Size: 1},
	}
	cmd.SysProcAttr.GidMappings = []syscall.SysProcIDMap{
		{ContainerID: 0, HostID: syscall.Getgid(), Size: 1},
	}

	must(cmd.Run())
}

func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

//	cg()

	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

//	must(syscall.Setuid(0))

	must(syscall.Sethostname([]byte("container")))
	must(syscall.Chroot("/home/mike/src/centos/"))
	must(syscall.Chdir("/"))
	must(syscall.Mount("proc", "proc", "proc", 0, ""))
	must(cmd.Run())
	must(syscall.Unmount("proc", 0))
}

func cg() {
	cgroups := "/sys/fs/cgroup/"
	pids := filepath.Join(cgroups, "pids")
	os.Mkdir(filepath.Join(pids, "mike"), 0755)
	must(ioutil.WriteFile(filepath.Join(pids, "mike/pids.max"), []byte("20"), 0700))
	// Removes the new cgroup in place after the container exits
	must(ioutil.WriteFile(filepath.Join(pids, "mike/notify_on_release"), []byte("1"), 0700))
	must(ioutil.WriteFile(filepath.Join(pids, "mike/cgroup.procs"), []byte(strconv.Itoa(os.Getpid())), 0700))
//	must(ioutil.WriteFile(filepath.Join(pids, "release_agent"), []byte("/usr/local/bin/remove-empty-cpu-cgroup.sh"), 0700))

}

func must(err error) {
	if err != nil {
		panic(err)
	}
}



---------------------------------------------------------------------------

-- line by line descriptions for fork bomb

ls /sys/fs/cgroup/pids/mike/
virt:~$ cat /sys/fs/cgroup/pids/mike/pids.max
20

cat /sys/fs/cgroup/pids/mike/pids.current 
6

-- fork bomb it
:(){ :|: & };:

This is called a fork bomb.
:() means you are defining a function called :
{:|: &} means run the function : and send its output to the : function again and run that in the background.
The ; is a command separator, like &&.
: runs the function the first time.
Essentially you are creating a function that calls itself twice every call and doesn't have any way to terminate itself.
It will keep doubling up until you run out of system resources.

-- yay ! cgroups works

virt:~$ cat /sys/fs/cgroup/pids/mike/pids.current 
20


-------

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
	"path/filepath"
	"io/ioutil"
	"strconv"	
)

// go run main.go run <cmd> <args>
func main() {
	switch os.Args[1] {
	case "run":
		run()
	case "child":
		child()
	default:
		panic("help")
	}
}

func run() {
	cmd := exec.Command("/proc/self/exe", append([]string{"child"}, os.Args[2:]...)...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// hostname, pid, mount - namespaces
	cmd.SysProcAttr = &syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID |
		syscall.CLONE_NEWNS,
	}

	must(cmd.Run())
}

// fork exec a child process
func child() {
	fmt.Printf("Running %v as PID %d\n", os.Args[2:], os.Getpid())

	cg()

	// connect processes together
	cmd := exec.Command(os.Args[2], os.Args[3:]...)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// set our container hostname
	must(syscall.Sethostname([]byte("container")))

	// mount a root filesystem
	must(syscall.Chroot("/home/mike/src/centos/"))

	// change directory
	must(syscall.Chdir("/"))

	// mount the containers /proc so we can see processes
	must(syscall.Mount("proc", "proc", "proc", 0, ""))

	// run child
	must(cmd.Run())
	must(syscall.Unmount("proc", 0))
}

// setup cgroups
func cg() {
	cgroups := "/sys/fs/cgroup/"
	pids := filepath.Join(cgroups, "pids")
	os.Mkdir(filepath.Join(pids, "mike"), 0755)
	must(ioutil.WriteFile(filepath.Join(pids, "mike/pids.max"), []byte("20"), 0700))
	// Removes the new cgroup in place after the container exits
	must(ioutil.WriteFile(filepath.Join(pids, "mike/notify_on_release"), []byte("1"), 0700))
	must(ioutil.WriteFile(filepath.Join(pids, "mike/cgroup.procs"), []byte(strconv.Itoa(os.Getpid())), 0700))
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}
